<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Theobald.Decryption.Common</name>
    </assembly>
    <members>
        <member name="T:Theobald.Decryption.Common.ColumnDecryptionProcessor">
            <summary>
            An class to provide a generic implementation template to use for decrypting data,
            which was generated by the XtractUniversal column level encryption feature.
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ColumnDecryptionProcessor.disposed">
            <summary>
            Flag to signal whether the array from the ArrayPool have already been returned.
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ColumnDecryptionProcessor.noBomEncoding">
            <summary>
            The encoding used to write the decrypted values to the target.
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ColumnDecryptionProcessor.metaData">
            <summary>
            The metadata holds information about the structure of the data and the encrypted
            session key required for the decryption.
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ColumnDecryptionProcessor.ReadAsync">
            <summary>
            The action which is called to read data from the source, which is the (partially) encrypted data.
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ColumnDecryptionProcessor.WriteAsync">
            <summary>
            The action which is called to write the results to the target destination.
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ColumnDecryptionProcessor.Buffer">
            <summary>
            The read buffer. It is fetched from the dotnetcore array pool to avoid unnecessary allocations.
            The array is returned to the pool in the dispose method.
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ColumnDecryptionProcessor.encodingBuffer">
            <summary>
            The encoding buffer. It is fetched from the dotnetcore array pool to avoid unnecessary allocations.
            The array is returned to the pool in the dispose method.
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ColumnDecryptionProcessor.cancellationToken">
            <summary>
            A token injected from the user which communicates a request to cancel the current decryption operation.
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ColumnDecryptionProcessor.columnInfo">
            <summary>
            The metadata for the columns as array for easier usage.
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.ColumnDecryptionProcessor.EncryptedSessionKey">
            <summary>
            The RSA encrypted AES-session key for the encrypted data.
            Decrypt this key using your private key to construct the
            <see cref="T:System.Security.Cryptography.AesGcm"/> cipher object,
            which is used in the DecryptCell method.
            </summary>
        </member>
        <member name="M:Theobald.Decryption.Common.ColumnDecryptionProcessor.#ctor(System.String)">
            <summary>
            Creates a new processor object to be used in decrypting data with encrypted columns.
            If this constructor runs through, the metadata supplied as JSON was successfully parsed.
            Thus the EncryptedSessionKey property holds the encrypted key to continue decryption setup.
            </summary>
            <param name="metaDataJson">The metadata of the encrypted data as a JSON string.</param>
            <exception cref="T:Theobald.Json.JsonException">The JSON holding the metadata was malformed or produced an unexpected result.</exception>
        </member>
        <member name="M:Theobald.Decryption.Common.ColumnDecryptionProcessor.ProcessDataAsync(System.Func{System.Memory{System.Byte},System.Byte[]},System.Func{System.Memory{System.Byte},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Int32}},System.Func{System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)">
            <summary>
            Reads the data in chunks from the source by calling the read method.
            Parses the read data, extracts the encrypted values and passes them to the decryption method.
            The decrypted data is the formatted according to the destination definition and destination settings.
            At the end the formatted data is passed to the write method.
            </summary>
            <param name="decryptCell">The method to decrypt one single cell.</param>
            <param name="readAsync">The method to read chunks from the encrypted data.</param>
            <param name="writeAsync">The method to write the decrypted data to its destination.</param>
            <param name="ct"></param>
            <returns>When the last chunk of data was read from the source, processed and written to the destination.</returns>
            <exception cref="T:Theobald.Decryption.Common.DecryptionException">This means an error in the format of the encrypted data or
            corruption of the data.</exception>
        </member>
        <member name="M:Theobald.Decryption.Common.ColumnDecryptionProcessor.WriteIfNotEmpty(System.String)">
            <summary>
            Wrapper for the write action.
            Simply checks if there is anything to write at all.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Theobald.Decryption.Common.ColumnDecryptionProcessor.WriteAsBytes(System.String)">
            <summary>
            Wrapper for the write action.
            Converts the provided span of chars to the target encoding.
            Executes the write action with the decoded bytes afterwards.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Theobald.Decryption.Common.ColumnDecryptionProcessor.WriteAsBytes(System.ReadOnlySpan{System.Char})">
            <summary>
            Wrapper for the write action.
            Converts the provided span of chars to the target encoding.
            Executes the write action with the decoded bytes afterwards.
            </summary>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:Theobald.Decryption.Common.ColumnDecryptionProcessor.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Theobald.Decryption.Common.ColumnEncryptionMetaData">
            <summary>
            Holds the meta data required by the decryption to process the extraction data.
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.ColumnEncryptionMetaData.ColumnInformation">
            <summary>
            The type information and other metadata for the columns of the data set.
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.ColumnEncryptionMetaData.EncryptedKey">
            <summary>
            The RSA encrypted AES key.
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.ColumnEncryptionMetaData.DestinationDefinition">
            <summary>
            The information defining the target destination for the data its default format.
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.ColumnEncryptionMetaData.DestinationSettings">
            <summary>
            The settings which specify if and how the data might be modified or adjusted for the destination.
            </summary>
        </member>
        <member name="M:Theobald.Decryption.Common.ColumnEncryptionMetaData.ReadJson(Theobald.Json.JsonReader)">
            <inheritdoc />
        </member>
        <member name="M:Theobald.Decryption.Common.ColumnEncryptionMetaData.WriteJson(Theobald.Json.JsonWriter)">
            <inheritdoc />
        </member>
        <member name="T:Theobald.Decryption.Common.Csv.CSVDestinationDefinition">
            <summary>
            The definition of the CSV destination in general.
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.Csv.CSVDestinationDefinition.EscapesSpace">
            <summary>
            Whether spaces within the cell are to be escaped or not.
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.Csv.CSVDestinationDefinition.ColumnSeparator">
            <summary>
            The column separator used in the source data and to be used in the result dataset.
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.Csv.CSVDestinationDefinition.EscapedColumnSeparator">
            <summary>
            How the column separator is to be escaped.
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Theobald.Decryption.Common.Csv.CSVDestinationDefinition.RowSeparator">
            <summary>
            The row separator to use.
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.Csv.CSVDestinationDefinition.EscapedRowSeparator">
            <summary>
            How the row separator is to be escaped.
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Theobald.Decryption.Common.Csv.CSVDestinationDefinition.QuoteSymbol">
            <summary>
            The symbol to used for quoting cells.
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.Csv.CSVDestinationDefinition.EscapeCharacter">
            <summary>
            The escape character to use.
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.Csv.CSVDestinationDefinition.FirstRowContainsColumnNames">
            <summary>
            Whether the first row in the data set contains the column names of the data set.
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.Csv.CSVDestinationDefinition.LastRowEndsWithRowSeparator">
            <summary>
            Whether to append a row separator to the end of the file.
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.Csv.CSVDestinationDefinition.Encoding">
            <summary>
            The encoding to use when writing to the target destination.
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.Csv.CSVDestinationDefinition.DecimalSeparator">
            <summary>
            Which token to use as the decimal separator.
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.Csv.CSVDestinationDefinition.DateFormat">
            <summary>
            The date format which should be used in the result dataset.
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.Csv.CSVDestinationDefinition.TimeFormat">
            <summary>
            The time format which should be used in the result dataset.
            </summary>
        </member>
        <member name="M:Theobald.Decryption.Common.Csv.CSVDestinationDefinition.#ctor">
            <summary>
            Initializes a new CSVDestinationDefinition instance
            with the default configuration of the the CSV destination.
            </summary>
        </member>
        <member name="M:Theobald.Decryption.Common.Csv.CSVDestinationDefinition.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new CSVDestinationDefinition instance with the provided configuration.
            </summary>
            <param name="columnSeparatorDefault"></param>
            <param name="lastRowEndsWithRowSeparatorDefault"></param>
            <param name="utf8Bom"></param>
        </member>
        <member name="M:Theobald.Decryption.Common.Csv.CSVDestinationDefinition.ReadJson(Theobald.Json.JsonReader)">
            <inheritdoc />
        </member>
        <member name="M:Theobald.Decryption.Common.Csv.CSVDestinationDefinition.WriteJson(Theobald.Json.JsonWriter)">
            <inheritdoc />
        </member>
        <member name="T:Theobald.Decryption.Common.Csv.CsvHelper">
            <summary>
            A helper class to format the data according to the user defined CSV style.
            </summary>
        </member>
        <member name="M:Theobald.Decryption.Common.Csv.CsvHelper.#ctor(Theobald.Decryption.Common.Csv.CSVDestinationDefinition)">
            <summary>
            Initializes a new CsvHelper from the provided CSVDestinationDefinition which is retrieved from the metadata.
            </summary>
            <param name="definition"></param>
        </member>
        <member name="M:Theobald.Decryption.Common.Csv.CsvHelper.QuoteIfRequired(System.String)">
            <summary>
            Applies the csv quoting rules to the string.
            </summary>
            <param name="value"></param>
            <returns>a quoted csv cell.</returns>
        </member>
        <member name="M:Theobald.Decryption.Common.Csv.CsvHelper.ToCsvString(System.Object,Theobald.Decryption.Common.ResultType)">
            <summary>
            Converts the provided value into a string respecting the configuration modelled by the destination definition.
            </summary>
            <param name="value">The raw value which is to be written as CSV cell.</param>
            <param name="type">The data type of the column.</param>
            <returns>A string representing the value formatted as a valid CSV cell.</returns>
            <exception cref="T:System.NotSupportedException">Unknown type for the column.</exception>
            <exception cref="T:System.InvalidCastException">The provided value had an unexpected type or
            could not be correctly cast to string.</exception>
            <exception cref="T:System.FormatException">The CSV style could not be correctly applied.</exception>
        </member>
        <member name="T:Theobald.Decryption.Common.Csv.CsvProcessor">
            <summary>
            <inheritdoc />
            Reads csv formatted data.
            </summary>
        </member>
        <member name="M:Theobald.Decryption.Common.Csv.CsvProcessor.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Theobald.Decryption.Common.Csv.CsvProcessor.ProcessDataAsync(System.Func{System.Memory{System.Byte},System.Byte[]},System.Func{System.Memory{System.Byte},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Int32}},System.Func{System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Theobald.Decryption.Common.Csv.CsvProcessor.ProcessCell(System.ReadOnlySpan{System.Char},System.Func{System.Memory{System.Byte},System.Byte[]})">
             <summary>
             Checks the meta data if the cell is encrypted and then decrypts the cell if necessary,
             otherwise the cell gets passed through.
            
             If the cell is from an encrypted column, it is decrypted and formatted according to the
             specified destinationDefinition and destinationSettings.
             </summary>
             <param name="cell">the csv cell from the parser.</param>
             <param name="decryptCell">the method which reads the cell, constructs the iv
             and returns the decrypted plaintext.</param>
             <returns>a span of the correctly decrypted and formatted data.</returns>
             <exception cref="T:Theobald.Decryption.Common.DecryptionException">This means an error in the format of the encrypted data or
             corruption of the data.</exception>
        </member>
        <member name="T:Theobald.Decryption.Common.DecryptionException">
            <summary>
            An exception to communicate an error which occured during the parsing or
            decryption of the source data.
            </summary>
        </member>
        <member name="M:Theobald.Decryption.Common.DecryptionException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Theobald.Decryption.Common.DecryptionException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Theobald.Decryption.Common.DecryptionException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Theobald.Decryption.Common.DecryptionHelper.ConvertToTargetType(Theobald.Decryption.Common.ResultType,System.ReadOnlySpan{System.Byte},System.Text.Encoding,System.String)">
            <summary>
            TODO: optimize performance
            </summary>
            <param name="type"></param>
            <param name="raw"></param>
            <param name="encoding"></param>
            <param name="timeFormat"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Theobald.Decryption.Common.ResultColumn">
            <summary>
            Metadata of a column in the dataset.
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.ResultColumn.Name">
            <summary>
            Gets the name of the result column.
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.ResultColumn.Description">
            <summary>
            Gets the description of the result column.
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.ResultColumn.ResultType">
            <summary>
            Gets the type of the result value.
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.ResultColumn.Length">
            <summary>
            Length of column values (e.g. necessary for strings)
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.ResultColumn.DecimalsCount">
            <summary>
            Decimal precision for decimal data type.
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.ResultColumn.IsPrimaryKey">
            <summary>
            Gets or sets a value indicating whether this column should be a primary key
            </summary>
        </member>
        <member name="P:Theobald.Decryption.Common.ResultColumn.IsEncrypted">
            <summary>
            Gets or sets a value indicating whether this column will be encrypted upon extraction
            </summary>
        </member>
        <member name="M:Theobald.Decryption.Common.ResultColumn.#ctor">
            <summary>
            Serialization
            </summary>
        </member>
        <member name="M:Theobald.Decryption.Common.ResultColumn.ReadJson(Theobald.Json.JsonReader)">
            <inheritdoc/>
        </member>
        <member name="M:Theobald.Decryption.Common.ResultColumn.WriteJson(Theobald.Json.JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="T:Theobald.Decryption.Common.ResultType">
            <summary>
            The target type of a column in the data set.
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ResultType.Byte">
            <summary>
            Values are of type <see cref="T:System.Byte"/>
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ResultType.Short">
            <summary>
            Values are of type <see cref="T:System.Int16"/>
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ResultType.Int">
            <summary>
            Values are of type <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ResultType.Long">
            <summary>
            Values are of type <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ResultType.Double">
            <summary>
            Values are of type <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ResultType.Decimal">
            <summary>
            Values are of type <see cref="T:System.Decimal"/>
            Total number of digits (integer + decimal part) is available via <see cref="P:Theobald.Decryption.Common.ResultColumn.Length"/>.
            Number of decimal digits is available via <see cref="P:Theobald.Decryption.Common.ResultColumn.DecimalsCount"/>.
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ResultType.NumericString">
            <summary>
            Values are of type <see cref="T:System.String"/> and only contain numeric characters.
            Exact length is available via <see cref="P:Theobald.Decryption.Common.ResultColumn.Length"/>.
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ResultType.StringLengthMax">
            <summary>
            Values are of type <see cref="T:System.String"/>.
            Maximum length is available via <see cref="P:Theobald.Decryption.Common.ResultColumn.Length"/>.
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ResultType.StringLengthUnknown">
            <summary>
            Values are of type <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ResultType.ByteArrayLengthExact">
            <summary>
            Values are arrays of type <see cref="T:System.Byte"/>.
            Exact number of elements per array is available via <see cref="P:Theobald.Decryption.Common.ResultColumn.Length"/>.
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ResultType.ByteArrayLengthMax">
            <summary>
            Values are arrays of type <see cref="T:System.Byte"/>.
            Maximum number of elements per array is available via <see cref="P:Theobald.Decryption.Common.ResultColumn.Length"/>.
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ResultType.ByteArrayLengthUnknown">
            <summary>
            Values are arrays of type <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ResultType.Date">
            <summary>
            Values are of type <see cref="T:System.String"/>.
            SAP date format: yyyymmdd
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ResultType.ConvertedDate">
            <summary>
            Values are of type <see cref="T:System.DateTime"/>
            Signals a date converted with the SapDateConversion rules, configured in the destination.
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ResultType.Time">
            <summary>
            Values are of type <see cref="T:System.TimeSpan"/>.
            Only <see cref="P:System.TimeSpan.Hours"/>, <see cref="P:System.TimeSpan.Minutes"/> and
            <see cref="P:System.TimeSpan.Seconds"/> have values.
            </summary>
        </member>
        <member name="F:Theobald.Decryption.Common.ResultType.TimeStamp">
            <summary>
            TODO: recreate reference when the datatype gets implemented.
            Values are of type see cref="ERPConnect.UtcLong".
            </summary>
        </member>
    </members>
</doc>
